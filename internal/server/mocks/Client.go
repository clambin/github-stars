// Code generated by mockery v2.50.1. DO NOT EDIT.

package mocks

import (
	context "context"
	iter "iter"

	github "github.com/google/go-github/v68/github"

	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

type Client_Expecter struct {
	mock *mock.Mock
}

func (_m *Client) EXPECT() *Client_Expecter {
	return &Client_Expecter{mock: &_m.Mock}
}

// GetStarGazers provides a mock function with given fields: ctx, repository
func (_m *Client) GetStarGazers(ctx context.Context, repository *github.Repository) ([]*github.Stargazer, error) {
	ret := _m.Called(ctx, repository)

	if len(ret) == 0 {
		panic("no return value specified for GetStarGazers")
	}

	var r0 []*github.Stargazer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *github.Repository) ([]*github.Stargazer, error)); ok {
		return rf(ctx, repository)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *github.Repository) []*github.Stargazer); ok {
		r0 = rf(ctx, repository)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*github.Stargazer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *github.Repository) error); ok {
		r1 = rf(ctx, repository)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_GetStarGazers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStarGazers'
type Client_GetStarGazers_Call struct {
	*mock.Call
}

// GetStarGazers is a helper method to define mock.On call
//   - ctx context.Context
//   - repository *github.Repository
func (_e *Client_Expecter) GetStarGazers(ctx interface{}, repository interface{}) *Client_GetStarGazers_Call {
	return &Client_GetStarGazers_Call{Call: _e.mock.On("GetStarGazers", ctx, repository)}
}

func (_c *Client_GetStarGazers_Call) Run(run func(ctx context.Context, repository *github.Repository)) *Client_GetStarGazers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*github.Repository))
	})
	return _c
}

func (_c *Client_GetStarGazers_Call) Return(_a0 []*github.Stargazer, _a1 error) *Client_GetStarGazers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_GetStarGazers_Call) RunAndReturn(run func(context.Context, *github.Repository) ([]*github.Stargazer, error)) *Client_GetStarGazers_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserRepos provides a mock function with given fields: ctx, user
func (_m *Client) GetUserRepos(ctx context.Context, user string) iter.Seq2[*github.Repository, error] {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for GetUserRepos")
	}

	var r0 iter.Seq2[*github.Repository, error]
	if rf, ok := ret.Get(0).(func(context.Context, string) iter.Seq2[*github.Repository, error]); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(iter.Seq2[*github.Repository, error])
		}
	}

	return r0
}

// Client_GetUserRepos_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserRepos'
type Client_GetUserRepos_Call struct {
	*mock.Call
}

// GetUserRepos is a helper method to define mock.On call
//   - ctx context.Context
//   - user string
func (_e *Client_Expecter) GetUserRepos(ctx interface{}, user interface{}) *Client_GetUserRepos_Call {
	return &Client_GetUserRepos_Call{Call: _e.mock.On("GetUserRepos", ctx, user)}
}

func (_c *Client_GetUserRepos_Call) Run(run func(ctx context.Context, user string)) *Client_GetUserRepos_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Client_GetUserRepos_Call) Return(_a0 iter.Seq2[*github.Repository, error]) *Client_GetUserRepos_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_GetUserRepos_Call) RunAndReturn(run func(context.Context, string) iter.Seq2[*github.Repository, error]) *Client_GetUserRepos_Call {
	_c.Call.Return(run)
	return _c
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
